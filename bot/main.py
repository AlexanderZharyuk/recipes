import random
import logging

from textwrap import dedent
from enum import Enum, auto

import environs
import requests
import phonenumbers

from telegram import (InlineKeyboardButton, InlineKeyboardMarkup, Update,
                      ReplyKeyboardMarkup, KeyboardButton)
from telegram.ext import (CallbackQueryHandler, CallbackContext,
                          CommandHandler, ConversationHandler,
                          MessageHandler, Filters, Updater)
from telegram import ParseMode
from more_itertools import chunked


class States(Enum):
    ACCEPT_PRIVACY = auto()
    START_REGISTRATION = auto()
    USER_FULLNAME = auto()
    USER_PHONE_NUMBER = auto()
    MAIN_MENU = auto()
    CATEGORY = auto()
    RECIPE = auto()
    USER_RECIPES = auto()
    FAVORITE_RECIPE = auto()


logger = logging.getLogger(__name__)


def start(update: Update, context: CallbackContext) -> States:
    """
    –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ - –µ—Å–ª–∏ —é–∑–µ—Ä –µ—Å—Ç—å –≤ –ë–î, —Ç–æ –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é,
    –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—è—Ç—å –æ—Ñ–µ—Ä—Ç—É –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    given_callback = update.callback_query
    if given_callback:
        telegram_id = context.user_data["telegram_id"]
        given_callback.answer()
        given_callback.delete_message()
    else:
        telegram_id = update.message.from_user.id

    url = f"http://127.0.0.1:8000/api/users/{telegram_id}"
    response = requests.get(url)

    if response.ok:
        user = response.json()
        user_fullname = user["user_fullname"]
        message_keyboard = [["üç≥ –†–µ—Ü–µ–ø—Ç—ã", "üôáüèª –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"]]
        markup = ReplyKeyboardMarkup(
            message_keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        menu_msg = dedent(f"""\
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user_fullname}!

        –ù–∞–π–¥–µ–º –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–ª–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–º, —á—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏?
        """)

        if given_callback:
            context.bot.send_message(
                text=menu_msg,
                chat_id=given_callback.message.chat.id,
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            )
            return States.MAIN_MENU

        update.message.reply_text(text=menu_msg, reply_markup=markup)
        return States.MAIN_MENU

    message_keyboard = [['‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', '‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω']]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
    )

    with open('documents/privacy_policy_statement.pdf', 'rb') as image:
        user_agreement_pdf = image.read()

    greeting_msg = dedent("""\
    –ü—Ä–∏–≤–µ—Ç!‚úåÔ∏è

    –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ - –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ \
    –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö. 

    –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.
    """).replace("  ", "")
    update.message.reply_document(
        user_agreement_pdf,
        filename="–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.pdf",
        caption=greeting_msg,
        reply_markup=markup)
    return States.ACCEPT_PRIVACY


def cancel_agreement(update: Update, context: CallbackContext) -> States:
    """
    –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ñ–µ—Ä—Ç–æ–π.
    """
    response_msg = dedent("""\
    –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≥–¥–∞ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –¥–∞—Ç—å –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º \
    –±–æ—Ç–æ–º. 

    –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–≥–ª–∞—Å–∏—è –Ω–∏–∂–µ.
    """).replace("  ", "")

    message_keyboard = [['‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', '‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω']]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    update.message.reply_text(
        text=response_msg,
        reply_markup=markup
    )
    return States.ACCEPT_PRIVACY


def start_user_registration(
        update: Update,
        context: CallbackContext) -> States:
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    update.message.reply_text("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    return States.START_REGISTRATION


def get_user_fullname(update: Update, context: CallbackContext) -> States:
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å context.user_data –¥–ª—è
    –±—É–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î.
    """
    words_in_user_answer = len(update.message.text.split())
    if words_in_user_answer == 1 or words_in_user_answer > 2:
        update.message.reply_text(dedent("""\
        –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ú–æ–∂–µ—Ç –≤—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é?

        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
        """))
        return States.START_REGISTRATION

    context.user_data["fullname"] = update.message.text.title()

    message_keyboard = [
        [
            KeyboardButton(
                '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                request_contact=True)
        ]
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        one_time_keyboard=True,
        resize_keyboard=True)

    update.message.reply_text(
        dedent("""\
        üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \
        <code>+7999-111-22-33</code> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:
        """).replace("  ", ""),
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    return States.USER_PHONE_NUMBER


def get_user_phone_number(update: Update, context: CallbackContext) -> States:
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å.
    –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —é–∑–µ—Ä–∞ –∏
    –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    if update.message.contact:
        context.user_data["phone_number"] = update.message.contact.phone_number
    else:
        phone_number = phonenumbers.parse(update.message.text, "RU")
        if not phonenumbers.is_valid_number(phone_number):
            message_keyboard = [
                [
                    KeyboardButton(
                        '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                        request_contact=True)
                ]
            ]
            markup = ReplyKeyboardMarkup(
                message_keyboard,
                one_time_keyboard=True,
                resize_keyboard=True)
            error_message = dedent("""\
            –í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:
            """)
            update.message.reply_text(error_message, reply_markup=markup)
            return States.USER_PHONE_NUMBER

        context.user_data["phone_number"] = update.message.text

    user_telegram_id = update.message.from_user.id
    url = f"http://127.0.0.1:8000/api/users/add/"
    payload = {
        "user_tg_id": user_telegram_id,
        "user_fullname": context.user_data["fullname"],
        "user_phone_number": context.user_data["phone_number"]
    }
    response = requests.post(url, data=payload)

    if response.ok:
        message_keyboard = [["üç≥ –†–µ—Ü–µ–ø—Ç—ã", "üôáüèª –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"]]
        markup = ReplyKeyboardMarkup(message_keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        end_registration_msg = dedent("""\
        üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! 

        üç≥ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å \
        —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ —Å–Ω–∏–∑—É. 

        üôáüèª –í –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –±—É–¥—É—Ç —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ª–∞–π–∫–Ω–∏—Ç–µ.
        """).replace("  ", "")
        update.message.reply_text(end_registration_msg, reply_markup=markup)
        return States.MAIN_MENU

    error_registration_msg = dedent("""\
    –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ /start
    """)
    update.message.reply_text(error_registration_msg)


def get_categories(update: Update, context: CallbackContext) -> States:
    """
    –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
    """
    url = f"http://127.0.0.1:8000/api/categories/"
    response = requests.get(url)
    response.raise_for_status()
    categories = response.json()

    categories_buttons = categories["available_categories"]
    categories_buttons.extend(["–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    message_keyboard = list(chunked(categories_buttons, 2))
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    categories_msg = dedent("""\
            –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç.
            """)
    update.message.reply_text(categories_msg, reply_markup=markup)
    return States.CATEGORY


def show_recipe(update: Update, context: CallbackContext) -> States:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ—Ü–µ–ø—Ç –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –æ—Ç–ª–∞–π–∫–∞–Ω—ã –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Ä–µ—Ü–µ–ø—Ç
    –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è –∏ –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    category = update.message.text
    context.user_data["category"] = category

    url = "http://127.0.0.1:8000/api/category/recipes/"
    params = {
        "category": category,
        "telegram_id": update.message.from_user.id
    }
    response = requests.get(url, params=params)

    if not response.ok:
        message_keyboard = [["–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        markup = ReplyKeyboardMarkup(message_keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        error_message = dedent("""\
        –ü–æ–¥–æ–±–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
        """)
        update.message.reply_text(error_message, reply_markup=markup)
        return States.CATEGORY

    recipes_in_category = response.json()

    if not recipes_in_category["available_recipes"]:
        message_keyboard = [["–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        markup = ReplyKeyboardMarkup(message_keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        info_message = dedent("""\
            –í—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!
            """)
        update.message.reply_text(info_message, reply_markup=markup)
        return States.CATEGORY

    random_recipe = random.choice(recipes_in_category["available_recipes"])
    recipe_name = random_recipe["recipe_name"]
    context.user_data["recipe_name"] = recipe_name
    recipe_description = random_recipe["recipe_description"]
    recipe_photo_url = random_recipe["recipe_photo"]
    response = requests.get(recipe_photo_url)
    response.raise_for_status()

    recipe_ingredients = [
        f"- {ingredient}" for ingredient in random_recipe["recipe_ingredients"]
    ]
    formatted_ingredients = '\n'.join(recipe_ingredients)

    recipe_message = dedent(f"""\
        {recipe_name}

        <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
        {recipe_description} 

        <b> –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: </b>
        {formatted_ingredients} 
        """).replace("  ", "")

    keyboard = [
        [
            InlineKeyboardButton("–õ–∞–π–∫", callback_data="like"),
            InlineKeyboardButton("–î–∏–∑–ª–∞–π–∫", callback_data="dislike"),
        ],
        [
            InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    context.user_data["telegram_id"] = update.message.from_user.id
    update.message.reply_photo(response.content,
                               caption=recipe_message,
                               reply_markup=markup,
                               parse_mode=ParseMode.HTML)
    return States.RECIPE


def get_random_recipe(update: Update, context: CallbackContext) -> States:
    """
    –í—ã–¥–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    if context.user_data.get("category"):
        del context.user_data["category"]

    url = "http://127.0.0.1:8000/api/recipe/random/"
    params = {
        "telegram_id": update.message.from_user.id
    }
    response = requests.get(url, params=params)

    if response.ok:
        recipe = response.json()
        recipe_name = recipe["recipe_name"]
        context.user_data["recipe_name"] = recipe_name
        recipe_description = recipe["recipe_description"]
        recipe_photo_url = recipe["recipe_image"]
        response = requests.get(recipe_photo_url)
        response.raise_for_status()
        recipe_ingredients = [
            f"- {ingredient}" for ingredient in
            recipe["recipe_ingredients"]
        ]
        formatted_ingredients = '\n'.join(recipe_ingredients)

        recipe_message = dedent(f"""\
        <b>{recipe_name}</b>

        <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
        {recipe_description} 

        <b> –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: </b>
        {formatted_ingredients} 
        """).replace("  ", "")

        keyboard = [
            [
                InlineKeyboardButton("–õ–∞–π–∫", callback_data="like"),
                InlineKeyboardButton("–î–∏–∑–ª–∞–π–∫", callback_data="dislike"),
            ],
            [
                InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        context.user_data["telegram_id"] = update.message.from_user.id
        update.message.reply_photo(
            response.content,
            caption=recipe_message,
            reply_markup=markup,
            parse_mode=ParseMode.HTML
        )
        return States.RECIPE

    message_keyboard = [["–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    markup = ReplyKeyboardMarkup(message_keyboard,
                                 resize_keyboard=True,
                                 one_time_keyboard=True)
    update.message.reply_text(
        text="–í—ã —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–∞—Å –µ—Å—Ç—å!",
        reply_markup=markup
    )
    return States.CATEGORY


def like_recipe(update: Update, context: CallbackContext) -> States:
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –ª–∞–π–∫ - —Ä–µ—Ü–µ–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ª–∏—á–Ω—ã–π
    –∫–æ–±–∏–Ω–µ—Ç –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ. –ê –≤ –∑–∞–º–µ–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
    """
    # TODO –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
    query = update.callback_query
    query.answer()

    url = "http://127.0.0.1:8000/api/favourites/add"
    recipe_name = context.user_data["recipe_name"]
    payload = {
        'user_tg_id': context.user_data["telegram_id"],
        'recipe_name': recipe_name
    }
    response = requests.post(url, data=payload)
    response.raise_for_status()

    if not context.user_data.get("category", None):
        url = "http://127.0.0.1:8000/api/recipe/random/"
        params = {
            "telegram_id": context.user_data["telegram_id"]
        }
        response = requests.get(url, params=params)

        if response.ok:
            query.delete_message()
            recipe = response.json()
            recipe_name = recipe["recipe_name"]
            context.user_data["recipe_name"] = recipe_name
            recipe_description = recipe["recipe_description"]
            recipe_photo_url = recipe["recipe_image"]
            response = requests.get(recipe_photo_url)
            response.raise_for_status()
            recipe_ingredients = [
                f"- {ingredient}" for ingredient in
                recipe["recipe_ingredients"]
            ]
            formatted_ingredients = '\n'.join(recipe_ingredients)

            recipe_message = dedent(f"""\
                <b>{recipe_name}</b>
    
                <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
                {recipe_description} 
    
                <b> –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: </b>
                {formatted_ingredients} 
                """).replace("  ", "")

            keyboard = [
                [
                    InlineKeyboardButton("–õ–∞–π–∫", callback_data="like"),
                    InlineKeyboardButton("–î–∏–∑–ª–∞–π–∫", callback_data="dislike"),
                ],
                [
                    InlineKeyboardButton(
                        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="main_menu"
                    )
                ]
            ]
            markup = InlineKeyboardMarkup(keyboard)

            query.message.reply_photo(
                response.content,
                caption=recipe_message,
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            )
            return States.RECIPE

        message_keyboard = [["–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        markup = ReplyKeyboardMarkup(
            message_keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        query.message.reply_text(
            text="–í—ã —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–∞—Å –µ—Å—Ç—å!",
            reply_markup=markup
        )
        return States.CATEGORY

    category = context.user_data["category"]
    url = "http://127.0.0.1:8000/api/category/recipes/"
    params = {
        "category": category,
        "telegram_id": context.user_data["telegram_id"]
    }
    response = requests.get(url, params=params)

    if not response.ok:
        message_keyboard = [["–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        markup = ReplyKeyboardMarkup(message_keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        error_message = dedent("""\
        –ü–æ–¥–æ–±–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
        """)
        query.message.reply_text(error_message, reply_markup=markup)
        return States.CATEGORY

    recipes_in_category = response.json()
    if not recipes_in_category["available_recipes"]:
        message_keyboard = [["–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        markup = ReplyKeyboardMarkup(message_keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        info_message = dedent("""\
            –í—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!
            """)
        query.message.reply_text(info_message, reply_markup=markup)
        return States.CATEGORY

    random_recipe = random.choice(recipes_in_category["available_recipes"])
    recipe_name = random_recipe["recipe_name"]
    context.user_data["recipe_name"] = recipe_name
    recipe_description = random_recipe["recipe_description"]
    recipe_photo_url = random_recipe["recipe_photo"]
    response = requests.get(recipe_photo_url)
    response.raise_for_status()

    recipe_ingredients = [
        f"- {ingredient}" for ingredient in random_recipe["recipe_ingredients"]
    ]
    formatted_ingredients = '\n'.join(recipe_ingredients)

    recipe_message = dedent(f"""\
            {recipe_name}

            <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
            {recipe_description} 

            <b> –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: </b>
            {formatted_ingredients} 
            """).replace("  ", "")

    keyboard = [
        [
            InlineKeyboardButton("–õ–∞–π–∫", callback_data="like"),
            InlineKeyboardButton("–î–∏–∑–ª–∞–π–∫", callback_data="dislike"),
        ],
        [
            InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    query.delete_message()
    query.message.reply_photo(
        response.content,
        caption=recipe_message,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    return States.RECIPE



def dislike_recipe(update: Update, context: CallbackContext) -> States:
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –¥–∏–∑–ª–∞–π–∫ - –≤—ã–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
    """
    # TODO –û—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
    query = update.callback_query
    query.answer()

    if not context.user_data.get("category", None):
        url = "http://127.0.0.1:8000/api/recipe/random/"
        params = {
            "telegram_id": context.user_data["telegram_id"]
        }
        response = requests.get(url, params=params)

        if response.ok:
            query.delete_message()
            recipe = response.json()
            recipe_name = recipe["recipe_name"]
            context.user_data["recipe_name"] = recipe_name
            recipe_description = recipe["recipe_description"]
            recipe_photo_url = recipe["recipe_image"]
            response = requests.get(recipe_photo_url)
            response.raise_for_status()
            recipe_ingredients = [
                f"- {ingredient[0]}" for ingredient in
                recipe["recipe_ingredients"]
            ]
            formatted_ingredients = '\n'.join(recipe_ingredients)

            recipe_message = dedent(f"""\
                –í–´ –ù–ê–ñ–ê–õ–ò –ù–ê –î–ò–ó–õ–ê–ô–ö
                
                <b>{recipe_name}</b>

                <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
                {recipe_description} 

                <b> –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: </b>
                {formatted_ingredients} 
                """).replace("  ", "")

            keyboard = [
                [
                    InlineKeyboardButton("–õ–∞–π–∫", callback_data="like"),
                    InlineKeyboardButton("–î–∏–∑–ª–∞–π–∫", callback_data="dislike"),
                ],
                [
                    InlineKeyboardButton(
                        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="main_menu"
                    )
                ]
            ]
            markup = InlineKeyboardMarkup(keyboard)

            query.message.reply_photo(
                response.content,
                caption=recipe_message,
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            )
            return States.RECIPE

    category = context.user_data["category"]
    url = "http://127.0.0.1:8000/api/category/recipes/"
    params = {
        "category": category,
        "telegram_id": context.user_data["telegram_id"]
    }
    response = requests.get(url, params=params)
    if not response.ok:
        message_keyboard = [["–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        markup = ReplyKeyboardMarkup(message_keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        error_message = dedent("""\
            –ü–æ–¥–æ–±–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
            """)
        query.message.reply_text(error_message, reply_markup=markup)
        return States.CATEGORY

    recipes_in_category = response.json()
    if not recipes_in_category["available_recipes"]:
        message_keyboard = [["–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        markup = ReplyKeyboardMarkup(message_keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        info_message = dedent("""\
                –í—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!
                """)
        query.message.reply_text(info_message, reply_markup=markup)
        return States.CATEGORY

    random_recipe = random.choice(recipes_in_category["available_recipes"])
    recipe_name = random_recipe["recipe_name"]
    context.user_data["recipe_name"] = recipe_name
    recipe_description = random_recipe["recipe_description"]
    recipe_photo_url = random_recipe["recipe_photo"]
    response = requests.get(recipe_photo_url)
    response.raise_for_status()

    recipe_ingredients = [
        f"- {ingredient}" for ingredient in random_recipe["recipe_ingredients"]
    ]
    formatted_ingredients = '\n'.join(recipe_ingredients)

    recipe_message = dedent(f"""\
                    –í–´ –ù–ê–ñ–ê–õ–ò –î–ò–ó–õ–ê–ô–ö
                    
                    {recipe_name}

                    <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
                    {recipe_description} 

                    <b> –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: </b>
                    {formatted_ingredients} 
                    """).replace("  ", "")
    keyboard = [
        [
            InlineKeyboardButton("–õ–∞–π–∫", callback_data="like"),
            InlineKeyboardButton("–î–∏–∑–ª–∞–π–∫", callback_data="dislike"),
        ],
        [
            InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    query.delete_message()
    query.message.reply_photo(response.content,
                              caption=recipe_message,
                              reply_markup=markup,
                              parse_mode=ParseMode.HTML)
    return States.RECIPE


def get_favorite_recipes(update: Update, context: CallbackContext) -> States:
    """
    –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ä–µ—Ü–ø—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    telegram_id = update.message.from_user.id
    params = {
        "user_telegram_id": telegram_id
    }
    url = "http://127.0.0.1:8000/api/favourites/"
    response = requests.get(url=url, params=params)
    favourite_recipes = response.json()['favourite_recipes']

    if not favourite_recipes:
        # TODO –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        update.message.reply_text('–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã')
        return States.USER_RECIPES

    message_keyboard = [
        favourite_recipes,
        ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(
        text='–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è',
        reply_markup=markup
    )
    return States.USER_RECIPES


def show_favorite_recipe(update: Update, context: CallbackContext) -> States:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    """
    recipe_name = update.message.text
    url = 'http://127.0.0.1:8000/api/recipe/'
    params = {
        "recipe_name": recipe_name
    }
    response = requests.get(url, params=params)

    if response.ok:
        recipe = response.json()
        ingredients = recipe.get('recipe_ingredients')
        parsed_ingredients = ""
        for ingredient in ingredients:
            parsed_ingredients += \
                f"{' - '.join([str(item) for item in ingredient])} –≥—Ä–∞–º–º\n"

        menu_msg = dedent(f"""\
            <b>{recipe.get('recipe_name')}</b>

            <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>
            {parsed_ingredients}
            <b>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</b>
            {recipe.get('recipe_description')}
            """).replace("    ", "")

        message_keyboard = [
            [
                "–ù–∞–∑–∞–¥",
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            ]
        ]
        markup = ReplyKeyboardMarkup(message_keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        recipe_img = requests.get(recipe['recipe_image'])
        update.message.reply_photo(
            recipe_img.content,
            caption=menu_msg,
            reply_markup=markup,
            parse_mode=ParseMode.HTML
        )
    else:
        update.message.reply_text('–¢–∞–∫–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ—Ç üò•')
    return States.FAVORITE_RECIPE


if __name__ == '__main__':
    env = environs.Env()
    env.read_env()
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )

    telegram_bot_token = env.str("TELEGRAM_BOT_TOKEN")

    updater = Updater(telegram_bot_token, use_context=True)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            States.ACCEPT_PRIVACY: [
                MessageHandler(
                    Filters.text("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω"), start_user_registration
                ),
                MessageHandler(
                    Filters.text("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"), cancel_agreement
                ),
            ],
            States.START_REGISTRATION: [
                MessageHandler(
                    Filters.text, get_user_fullname
                )
            ],
            States.USER_PHONE_NUMBER: [
                MessageHandler(
                    Filters.text, get_user_phone_number
                ),
                MessageHandler(
                    Filters.contact, get_user_phone_number
                )
            ],
            States.MAIN_MENU: [
                MessageHandler(
                    Filters.text("üç≥ –†–µ—Ü–µ–ø—Ç—ã"), get_categories
                ),
                MessageHandler(
                    Filters.text("üôáüèª –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"), get_favorite_recipes
                )
            ],
            States.CATEGORY: [
                MessageHandler(
                    Filters.text("–ù–∞–∑–∞–¥"), get_categories
                ),
                MessageHandler(
                    Filters.text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                ),
                MessageHandler(
                    Filters.text("–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"), get_random_recipe
                ),
                MessageHandler(
                    Filters.text, show_recipe
                )
            ],
            States.RECIPE: [
                CallbackQueryHandler(
                    like_recipe, pattern="like"
                ),
                CallbackQueryHandler(
                    dislike_recipe, pattern="dislike"
                ),
                CallbackQueryHandler(
                    start, pattern="main_menu"
                )
            ],
            States.USER_RECIPES: [
                MessageHandler(
                    Filters.text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                ),
                MessageHandler(
                    Filters.text, show_favorite_recipe
                ),
            ],
            States.FAVORITE_RECIPE: [
                MessageHandler(
                    Filters.text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                ),
                MessageHandler(
                    Filters.text("–ù–∞–∑–∞–¥"), get_favorite_recipes
                ),
            ]
        },
        fallbacks=[],
        allow_reentry=True,
        name='bot_conversation',
    )

    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()
